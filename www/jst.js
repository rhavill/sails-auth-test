this["JST"] = this["JST"] || {};

this["JST"]["assets/linker/js/custom/app/home/home.tpl.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="jumbotron">\n    <h1>Home Page</h1>\n\n    <p class="lead">\n        Welcome to the home page. This page is publicly accessible.\n    </p>\n</div>\n\n';

}
return __p
};

this["JST"]["assets/linker/js/custom/app/login/login.tpl.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="row=fluid" login-form>\n</div>';

}
return __p
};

this["JST"]["assets/linker/js/custom/app/private/private.tpl.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<div class="row-fluid">\n    <h1 class="page-header">\n        Private Page\n    </h1>\n\n    <p>\n        In order to view this page, you must be logged in.\n    </p>\n</div>\n\n';

}
return __p
};

this["JST"]["assets/linker/js/custom/common/login/loginForm.tpl.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<form class="form-horizontal" ng-controller="LoginFormController">\n    <alert ng-repeat="alert in alerts" type="alert.type" close="closeAlert($index)">{{alert.msg}}</alert>\n    <div class="control-group">\n        <label class="control-label" for="inputUsername">Username</label>\n\n        <div class="controls">\n            <input name="username" ng-model="user.username" type="text" id="inputUsername" placeholder="Username">\n        </div>\n    </div>\n    <div class="control-group">\n        <label class="control-label" for="inputPassword">Password</label>\n\n        <div class="controls">\n            <input name="password" ng-model="user.password" type="password" id="inputPassword" placeholder="Password">\n        </div>\n    </div>\n    <div class="control-group">\n        <div class="controls">\n            <!--label class="checkbox">\n                <input type="checkbox"> Remember me\n            </label-->\n            <button id="login-button" ng-click="login()" class="btn">Sign in</button>\n        </div>\n    </div>\n</form>';

}
return __p
};

this["JST"]["assets/linker/js/custom/common/login/loginLink.tpl.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<a ng-hide="isAuthenticated()" href="#/login"><i class="icon-user"></i>&nbsp;Login</a>\n<a ng-show="isAuthenticated()" href="#" ng-click="logout()"><i class="icon-user logout"></i>&nbsp;Logout</a>\n';

}
return __p
};

this["JST"]["assets/linker/js/custom/index.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
with (obj) {
__p += '<!DOCTYPE html>\n<html ng-app="ngStarterKit" ng-controller="AppCtrl">\n<head>\n    <title ng-bind="pageTitle"></title>\n    <meta charset="UTF-8"/>\n    ';
 grunt.file.expand({cwd:baseDir},cssFiles).forEach( function ( file ) { ;
__p += '\n        <link href="' +
((__t = ( file )) == null ? '' : __t) +
'" rel="stylesheet">\n    ';
 }); ;
__p += '\n</head>\n<body>\n<nav class="navbar navbar-default" role="navigation">\n  <div class="container-fluid">\n    <!-- Brand and toggle get grouped for better mobile display -->\n    <div class="navbar-header">\n      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" ng-click="navIsCollapsed = !navIsCollapsed">\n        <span class="sr-only">Toggle navigation</span>\n        <span class="icon-bar"></span>\n        <span class="icon-bar"></span>\n        <span class="icon-bar"></span>\n      </button>\n      <a class="navbar-brand" href="#"></a>\n    </div>\n\n    <!-- Collect the nav links, forms, and other content for toggling -->\n    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1" collapse="navIsCollapsed">\n      <ul class="nav navbar-nav">\n        <li ui-route="/home" ng-class="{active:$state.includes(\'home\')}">\n            <a href="#/home"><i class="icon-home"></i>&nbspHome</a>\n        </li>\n        <li ui-route="/private" ng-class="{active:$state.includes(\'private\')}">\n            <a href="#/private"><i class="icon-lock"></i>&nbspPrivate</a>\n        </li>\n        <li ui-route="#/login" ng-class="{active:$state.includes(\'login\')}" login-link></li>\n      </ul>\n    </div><!-- /.navbar-collapse -->\n  </div><!-- /.container-fluid -->\n</nav>\n\n<div class="container" ui-view="main"></div>\n';
 grunt.file.expand({cwd:baseDir},jsFiles).forEach( function ( file ) { ;
__p += '\n    <script type="text/javascript" src="' +
((__t = ( file )) == null ? '' : __t) +
'"></script>\n';
 }); ;
__p += '\n</body>\n</html>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/index.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<!doctype html>\n<!--[if lt IE 7]> <html class="no-js lt-ie9 lt-ie8 lt-ie7 ng-app: docsApp;" lang="en" ng-controller="DocsController"> <![endif]-->\n<!--[if IE 7]>    <html class="no-js lt-ie9 lt-ie8 ng-app: docsApp;" lang="en" ng-controller="DocsController"> <![endif]-->\n<!--[if IE 8]>    <html class="no-js lt-ie9 ng-app: docsApp;" lang="en" ng-controller="DocsController"> <![endif]-->\n<!--[if gt IE 8]><!--> <html class="no-js ng-app: docsApp;" lang="en" ng-controller="DocsController"> <!--<![endif]-->\n<head>\n  <meta charset="utf-8">\n  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">\n  <meta name="Description"\n        content="AngularJS is what HTML would have been, had it been designed for building web-apps.\n                 Declarative templates with data-binding, MVC, dependency injection and great\n                 testability story all implemented with pure client-side JavaScript!">\n  <meta name="fragment" content="!">\n  <title ng-bind-template="UI Router: {{partialTitle}}">Docs</title>\n  <script type="text/javascript">\n    // dynamically add base tag as well as css and javascript files.\n    // we can\'t add css/js the usual way, because some browsers (FF) eagerly prefetch resources\n    // before the base attribute is added, causing 404 and terribly slow loading of the docs app.\n    (function() {\n      var indexFile = (location.pathname.match(/\\/(index[^\\.]*\\.html)/) || [\'\', \'\'])[1],\n          rUrl = /(#!\\/|api|index[^\\.]*\\.html).*$/,\n          baseUrl = location.href.replace(rUrl, indexFile),\n          headEl = document.getElementsByTagName(\'head\')[0],\n          sync = true;\n\n      addTag(\'base\', {href: baseUrl});\n      addTag(\'link\', {rel: \'stylesheet\', href: \'css/bootstrap.min.css\', type: \'text/css\'});\n      addTag(\'link\', {rel: \'stylesheet\', href: \'css/font-awesome.css\', type: \'text/css\'});\n      addTag(\'link\', {rel: \'stylesheet\', href: \'css/docs.css\', type: \'text/css\'});\n      addTag(\'link\', {rel: \'stylesheet\', href: \'css/animations.css\', type: \'text/css\'});\n      \n      \n        addTag(\'script\', {src: \'js/angular.min.js\'}, sync);\n      \n      addTag(\'script\', {src: \'js/angular-bootstrap.min.js\'}, sync);\n      addTag(\'script\', {src: \'js/angular-bootstrap-prettify.min.js\'}, sync);\n      addTag(\'script\', {src: \'js/docs-setup.js\'}, sync);\n      addTag(\'script\', {src: \'js/docs.js\'}, sync);\n\n      function addTag(name, attributes, sync) {\n        var el = document.createElement(name),\n            attrName;\n\n        for (attrName in attributes) {\n          el.setAttribute(attrName, attributes[attrName]);\n        }\n\n        sync ? document.write(outerHTML(el)) : headEl.appendChild(el);\n      }\n\n      function outerHTML(node){\n        // if IE, Chrome take the internal method otherwise build one\n        return node.outerHTML || (\n            function(n){\n                var div = document.createElement(\'div\'), h;\n                div.appendChild(n);\n                h = div.innerHTML;\n                div = null;\n                return h;\n            })(node);\n      }\n    })();\n\n  </script>\n</head>\n\n<body>\n  <header class="header">\n    <div class="navbar navbar-fixed-top">\n      <div class="navbar-inner">\n        <div class="container">\n          \n          \n            <a  class="brand">UI Router</a>\n          \n          <ul class="nav">\n            <li ng-repeat="(url, name) in sections" ng-class="{active: isActivePath(url)}">\n              <a ng-href="{{url}}"><i class="icon-book icon-white"></i> {{name}}</a>\n            </li>\n          </ul>\n          \n        </div>\n      </div>\n    </div>\n  </header>\n\n  <div role="main" class="container">\n    <div class="row clear-navbar"></div>\n\n    <div class="row">\n      <div class="span12">\n        <!--[if lt IE 7]>\n        <p class="alert alert-error">Your browser is <em>ancient!</em>\n          <a href="http://browsehappy.com/">Upgrade to a different browser</a> or\n          <a href="http://www.google.com/chromeframe/?redirect=true">install Google Chrome Frame</a> to\n          experience this site.\n        </p>\n        <![endif]-->\n\n        <!--[if lt IE 9]>\n        <div class="alert">\n          You are using an old version of Internet Explorer.\n          For better and safer browsing experience please <a href="http://www.microsoft.com/IE9">upgrade IE</a>\n          or install <a href="http://google.com/chrome">Google Chrome browser</a>.\n        </div>\n        <![endif]-->\n      </div>\n\n    </div>\n\n    <div class="row">\n      <div class="span3">\n        <form class="form-search" ng-submit="submitForm()">\n          \n          <input type="text" ng-model="search" placeholder="search the docs"\n                 tabindex="1" accesskey="s" class="search-query" focused="focused">\n          \n          <div class="spacer"></div>\n\n          <ul class="nav nav-list well" ng-show="pages">\n            <li ng-repeat="page in pages track by page.url" ng-animate="\'expand\'" ng-class="navClass(page)" class="api-list-item">\n              <a href="{{page.url}}" tabindex="2">{{page.shortName}}</a>\n            </li>\n          </ul>\n\n          <ul class="nav nav-list well" ng-repeat="module in modules track by module.url" class="api-list-item">\n            <li class="nav-header module">\n              <a class="guide">module</a>\n              <a class="code" href="{{module.url}}">{{module.name}}</a>\n            </li>\n\n            <li ng-repeat="page in module.others track by page.url" ng-animate="\'expand\'" ng-class="navClass(page)" class="api-list-item">\n              <a href="{{page.url}}" tabindex="2">{{page.shortName}}</a>\n            </li>\n\n            <li class="nav-header section" ng-show="module.directives">\n              <a class="guide">directive</a>\n            </li>\n            <li ng-repeat="page in module.directives track by page.url" ng-animate="\'expand\'" ng-class="navClass(page)" class="api-list-item">\n              <a href="{{page.url}}" tabindex="2">{{page.shortName}}</a>\n            </li>\n\n            <li class="nav-header section" ng-show="module.filters">\n              <a class="guide">filter</a>\n            </li>\n            <li ng-repeat="page in module.filters track by page.url" ng-animate="\'expand\'" ng-class="navClass(page)" class="api-list-item">\n              <a href="{{page.url}}" tabindex="2">{{page.shortName}}</a>\n            </li>\n\n            <li class="nav-header section" ng-show="module.services">\n              <a class="guide">service</a>\n            </li>\n            <li ng-repeat="service in module.services track by service.instance.url" ng-animate="\'expand\'" ng-class="navClass(service.instance, service.provider)" class="api-list-item">\n              <a ng-show="service.provider" class="pull-right" href="{{service.provider.url}}" tabindex="2"><i class="icon-cog"></i></a>\n              <a href="{{service.instance.url}}" tabindex="2">{{service.name}}</a>\n            </li>\n\n            <li class="nav-header section" ng-show="module.types">\n              <a class="guide">Types</a>\n            </li>\n            <li ng-repeat="page in module.types track by page.url" ng-animate="\'expand\'" ng-class="navClass(page)" class="api-list-item">\n              <a href="{{page.url}}" tabindex="2">{{page.shortName}}</a>\n            </li>\n\n            <li class="nav-header section" ng-show="module.globals">\n              <a class="global guide">global APIs</a>\n              &nbsp;\n            </li>\n            <li ng-repeat="page in module.globals track by page.url" ng-animate="\'expand\'" ng-class="navClass(page)" class="api-list-item">\n              <a href="{{page.url}}" tabindex="2">{{page.id}}</a>\n            </li>\n\n          </ul>\n\n        </form>\n      </div>\n      <div class="span9">\n\n        <ul class="breadcrumb">\n          <li ng-repeat="crumb in breadcrumb">\n            <span ng-hide="crumb.url">{{crumb.name}}</span>\n            <a ng-show="crumb.url" href="{{crumb.url}}">{{crumb.name}}</a>\n            <span ng-show="crumb.url" class="divider">/</span>\n          </li>\n        </ul>\n\n        <div id="loading" ng-show="loading">Loading...</div>\n\n        <div ng-hide="loading" ng-include src="currentPage.partialUrl" onload="afterPartialLoaded()" autoscroll class="content" ng-animate="{enter: \'slide-reveal\'}" ></div>\n\n      </div>\n    </div>\n  </div>\n\n</body>\n</html>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.compat.$route.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">$route</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.compat</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p>The <code>$route</code> service provides interfaces to access defined routes. It also let\'s\nyou access route params through <code>$routeParams</code> service, so you have fully\ncontrol over all the stuff you would actually get from angular\'s core <code>$route</code>\nservice.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.state.$state">$state</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$rootScope">$rootScope</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$routeParams">$routeParams</a></code>\n</li>\n</ul>\n<div class="member property"><h2 id="Properties">Properties</h2>\n<ul class="properties"><li><h3 id="routes">routes</h3>\n<div class="routes"><ul>\n<li>Array of registered routes.</li>\n</ul></div>\n</li>\n<li><h3 id="params">params</h3>\n<div class="params"><ul>\n<li>Current route params as object.</li>\n</ul></div>\n</li>\n<li><h3 id="current">current</h3>\n<div class="current"><ul>\n<li>Name of the current route.</li>\n</ul></div>\n</li>\n</ul>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.compat.$routeProvider.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">$routeProvider</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.compat</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p><code>$routeProvider</code> of the <code>ui.router.compat</code> module overwrites the existing\n<code>routeProvider</code> from the core. This is done to provide compatibility between\nthe UI Router and the core router.</p>\n\n<p>It also provides a <code>when()</code> method to register routes that map to certain urls.\nBehind the scenes it actually delegates either to \n<a href="#/api/ui.router.router.$urlRouterProvider">$urlRouterProvider</a> or to the \n<a href="#/api/ui.router.state.$stateProvider">$stateProvider</a> to postprocess the given \nrouter definition object.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.state.$stateProvider">$stateProvider</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ui.router.router.$urlRouterProvider">$urlRouterProvider</a></code>\n</li>\n</ul>\n<div class="member method"><h2 id="Methods">Methods</h2>\n<ul class="methods"><li><h3 id="when">when(url, route)</h3>\n<div class="when"><p>Registers a route with a given route definition object. The route definition\nobject has the same interface the angular core route definition object has.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">url – {string} – </code>\n<p>URL as string</p></li>\n<li><code ng:non-bindable="">route – {object} – </code>\n<p>Route definition object</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{object}</code>\n– <p>$routeProvider - $routeProvider instance</p></div>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\nvar app = angular.module(\'app\', [\'ui.router.compat\']);\n\napp.config(function ($routeProvider) {\n  $routeProvider.when(\'home\', {\n    controller: function () { ... },\n    templateUrl: \'path/to/template\'\n  });\n});\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.compat.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable=""></code>\n<span class="hint"></span>\n</h1>\n<div><h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router">router</a></code>\n</li>\n</ul>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable=""></code>\n<span class="hint"></span>\n</h1>\n<div><h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.state">state</a></code>\n</li>\n</ul>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.router.$urlRouter.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">$urlRouter</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.router</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ng.$location">$location</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$rootScope">$rootScope</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$injector">$injector</a></code>\n</li>\n</ul>\n<div class="member method"><h2 id="Methods">Methods</h2>\n<ul class="methods"><li><h3 id="sync">sync()</h3>\n<div class="sync"><p>Triggers an update; the same update that happens when the address bar url changes, aka <code>$locationChangeSuccess</code>.\nThis method is useful when you need to use <code>preventDefault()</code> on the <code>$locationChangeSuccess</code> event, \nperform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed \nwith the transition by calling <code>$urlRouter.sync()</code>.</p><h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\nangular.module(\'app\', [\'ui.router\']);\n  .run(function($rootScope, $urlRouter) {\n    $rootScope.$on(\'$locationChangeSuccess\', function(evt) {\n      // Halt state change from even starting\n      evt.preventDefault();\n      // Perform custom logic\n      var meetsRequirement = ...\n      // Continue with the update and state transition if logic allows\n      if (meetsRequirement) $urlRouter.sync();\n    });\n});\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.router.$urlRouterProvider.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">$urlRouterProvider</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.router</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p><code>$urlRouterProvider</code> has the responsibility of watching <code>$location</code>. \nWhen <code>$location</code> changes it runs through a list of rules one by one until a \nmatch is found. <code>$urlRouterProvider</code> is used behind the scenes anytime you specify \na url in a state configuration. All urls are compiled into a UrlMatcher object.</p>\n\n<p>There are several methods on <code>$urlRouterProvider</code> that make it useful to use directly\nin your module config.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.util.$urlMatcherFactoryProvider">$urlMatcherFactoryProvider</a></code>\n</li>\n</ul>\n<div class="member method"><h2 id="Methods">Methods</h2>\n<ul class="methods"><li><h3 id="otherwise">otherwise(rule)</h3>\n<div class="otherwise"><p>Defines a path that is used when an invalied route is requested.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">rule – {string|object} – </code>\n<p>The url path you want to redirect to or a function \nrule that returns the url path. The function version is passed two params: \n<code>$injector</code> and <code>$location</code> services.</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{object}</code>\n– <p>$urlRouterProvider - $urlRouterProvider instance</p></div>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\nvar app = angular.module(\'app\', [\'ui.router.router\']);\n\napp.config(function ($urlRouterProvider) {\n  // if the path doesn\'t match any of the urls you configured\n  // otherwise will take care of routing the user to the\n  // specified url\n  $urlRouterProvider.otherwise(\'/index\');\n\n  // Example of using function rule as param\n  $urlRouterProvider.otherwise(function ($injector, $location) {\n    ...\n  });\n});\n</pre></div>\n</div>\n</li>\n<li><h3 id="rule">rule(rule)</h3>\n<div class="rule"><p>Defines rules that are used by `$urlRouterProvider to find matches for\nspecific URLs.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">rule – {object} – </code>\n<p>Handler function that takes <code>$injector</code> and <code>$location</code>\nservices as arguments. You can use them to return a valid path as a string.</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{object}</code>\n– <p>$urlRouterProvider - $urlRouterProvider instance</p></div>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\nvar app = angular.module(\'app\', [\'ui.router.router\']);\n\napp.config(function ($urlRouterProvider) {\n  // Here\'s an example of how you might allow case insensitive urls\n  $urlRouterProvider.rule(function ($injector, $location) {\n    var path = $location.path(),\n        normalized = path.toLowerCase();\n\n    if (path !== normalized) {\n      return normalized;\n    }\n  });\n});\n</pre></div>\n</div>\n</li>\n<li><h3 id="when">when(what, handler)</h3>\n<div class="when"><p>Registers a handler for a given url matching. if handle is a string, it is\ntreated as a redirect, and is interpolated according to the syyntax of match\n(i.e. like String.replace() for RegExp, or like a UrlMatcher pattern otherwise).</p>\n\n<p>If the handler is a function, it is injectable. It gets invoked if <code>$location</code>\nmatches. You have the option of inject the match object as <code>$match</code>.</p>\n\n<p>The handler can return</p>\n\n<ul>\n<li><strong>falsy</strong> to indicate that the rule didn\'t match after all, then <code>$urlRouter</code>\nwill continue trying to find another one that matches.</li>\n<li><strong>string</strong> which is treated as a redirect and passed to <code>$location.url()</code></li>\n<li><strong>void</strong> or any <strong>truthy</strong> value tells <code>$urlRouter</code> that the url was handled.</li>\n</ul><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">what – {string|object} – </code>\n<p>The incoming path that you want to redirect.</p></li>\n<li><code ng:non-bindable="">handler – {string|object} – </code>\n<p>The path you want to redirect your user to.</p></li>\n</ul>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\nvar app = angular.module(\'app\', [\'ui.router.router\']);\n\napp.config(function ($urlRouterProvider) {\n  $urlRouterProvider.when($state.url, function ($match, $stateParams) {\n    if ($state.$current.navigable !== state ||\n        !equalForKeys($match, $stateParams) {\n     $state.transitionTo(state, $match, false);\n    }\n  });\n});\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.router.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable=""></code>\n<span class="hint"></span>\n</h1>\n<div><h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.router">router</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ui.router.util">util</a></code>\n</li>\n</ul>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.state.$state.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">$state</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.state</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p><code>$state</code> service is responsible for representing states as well as transitioning\nbetween them. It also provides interfaces to ask for current state or even states\nyou\'re coming from.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ng.$rootScope">$rootScope</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$q">$q</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ui.router.state.$view">$view</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$injector">$injector</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ui.router.util.$resolve">$resolve</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ui.router.state.$stateParams">$stateParams</a></code>\n</li>\n</ul>\n<div class="member method"><h2 id="Methods">Methods</h2>\n<ul class="methods"><li><h3 id="get">get(stateOrName)</h3>\n<div class="get"><p>Returns the state configuration object for any state by passing the name\nas a string. Without any arguments it\'ll return a array of all configured\nstate objects.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">stateOrName – {string|object} – </code>\n<p>The name of the state for which you\'d like \nto get the original state configuration object for.</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{object}</code>\n– <p>State configuration object or array of all objects.</p></div>\n</div>\n</li>\n<li><h3 id="go">go(to, params, options)</h3>\n<div class="go"><p>Convenience method for transitioning to a new state. <code>$state.go</code> calls \n<code>$state.transitionTo</code> internally but automatically sets options to \n<code>{ location: true, inherit: true, relative: $state.$current, notify: true }</code>. \nThis allows you to easily use an absolute or relative to path and specify \nonly the parameters you\'d like to update (while letting unspecified parameters \ninherit from the current state.</p>\n\n<p>Some examples:</p>\n\n<ul>\n<li><code>$state.go(\'contact.detail\')</code> - will go to the <code>contact.detail</code> state</li>\n<li><code>$state.go(\'^\')</code> - will go to a parent state</li>\n<li><code>$state.go(\'^.sibling\')</code> - will go to a sibling state</li>\n<li><code>$state.go(\'.child.grandchild\')</code> - will go to grandchild state</li>\n</ul><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">to – {string} – </code>\n<p>Absolute State Name or Relative State Path.</p></li>\n<li><code ng:non-bindable="">params – {object} – </code>\n<p>A map of the parameters that will be sent to the state, \nwill populate $stateParams.</p></li>\n<li><code ng:non-bindable="">options – {object} – </code>\n<p>If Object is passed, object is an options hash.</p></li>\n</ul>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\nvar app = angular.module(\'app\', [\'ui.router.state\']);\n\napp.controller(\'ctrl\', function ($scope, $state) {\n  $scope.changeState = function () {\n    $state.go(\'contact.detail\');\n  };\n});\n</pre></div>\n</div>\n</li>\n<li><h3 id="href">href(stateOrName, params)</h3>\n<div class="href"><p>A url generation method that returns the compiled url for the given state populated with the given params.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">stateOrName – {string|object} – </code>\n<p>The state name or state object you\'d like to generate a url from.</p></li>\n<li><code ng:non-bindable="">params – {object} – </code>\n<p>An object of parameter values to fill the state\'s required parameters.</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{string}</code>\n– <p>url</p></div>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\nexpect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");\n</pre></div>\n</div>\n</li>\n<li><h3 id="includes">includes(stateOrName, params)</h3>\n<div class="includes"><p>A method to determine if the current active state is equal to or is the child of the \nstate stateName. If any params are passed then they will be tested for a match as well.\nNot all the parameters need to be passed, just the ones you\'d like to test for equality.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">stateOrName – {string} – </code>\n<p>A partial name to be searched for within the current state name.</p></li>\n<li><code ng:non-bindable="">params – {object} – </code>\n<p>A param object, e.g. <code>{sectionId: section.id}</code>, \nthat you\'d like to test against the current active state.</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{boolean}</code>\n– <p>True or false</p></div>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\n$state.includes("contacts"); // returns true\n$state.includes("contacts.details"); // returns true\n$state.includes("contacts.details.item"); // returns true\n$state.includes("contacts.list"); // returns false\n$state.includes("about"); // returns false\n</pre></div>\n</div>\n</li>\n<li><h3 id="is">is(stateName, params)</h3>\n<div class="is"><p>Similar to <a href="#/api/ui.router.state.$state#methods_includes">$state.includes</a>,\nbut only checks for the full state name. If params is supplied then it will be \ntested for strict equality against the current active params object, so all params \nmust match with none missing and no extras.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">stateName – {string|object} – </code>\n<p>The state name or state object you\'d like to check.</p></li>\n<li><code ng:non-bindable="">params – {object} – </code>\n<p>A param object, e.g. <code>{sectionId: section.id}</code>, that you\'d like \nto test against the current active state.</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{boolean}</code>\n– <p>Returns true or false whether its the state or not.</p></div>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\n$state.is(\'contact.details.item\'); // returns true\n$state.is(contactDetailItemStateObject); // returns true\n\n// everything else would return false\n</pre></div>\n</div>\n</li>\n<li><h3 id="reload">reload()</h3>\n<div class="reload"><p>Reloads the current state by re-transitioning to it.</p><h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\nvar app angular.module(\'app\', [\'ui.router.state\']);\n\napp.controller(\'ctrl\', function ($state) {\n  $state.reload();\n});\n</pre></div>\n</div>\n</li>\n<li><h3 id="transitionTo">transitionTo(to, params, options)</h3>\n<div class="transitionto"><p>Low-level method for transitioning to a new state. <a href="#/api/ui.router.state.$state#methods_go">$state.go</a>\nuses <code>transitionTo</code> internally. <code>$state.go</code> is recommended in most situations.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">to – {string} – </code>\n<p>Absolute State Name or Relative State Path.</p></li>\n<li><code ng:non-bindable="">params – {object} – </code>\n<p>A map of the parameters that will be sent to the state, \nwill populate $stateParams.</p></li>\n<li><code ng:non-bindable="">options – {object} – </code>\n<p>If Object is passed, object is an options hash.</p></li>\n</ul>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\nvar app = angular.module(\'app\', [\'ui.router.state\']);\n\napp.controller(\'ctrl\', function ($scope, $state) {\n  $scope.changeState = function () {\n    $state.transitionTo(\'contact.detail\');\n  };\n});\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n<div class="member property"><h2 id="Properties">Properties</h2>\n<ul class="properties"><li><h3 id="params">params</h3>\n<div class="params"><p>A param object, e.g. {sectionId: section.id)}, that \nyou\'d like to test against the current active state.</p></div>\n</li>\n<li><h3 id="current">current</h3>\n<div class="current"><p>A reference to the state\'s config object. However \nyou passed it in. Useful for accessing custom data.</p></div>\n</li>\n<li><h3 id="transition">transition</h3>\n<div class="transition"><p>Currently pending transition. A promise that\'ll \nresolve or reject.</p></div>\n</li>\n</ul>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.state.$stateProvider.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">$stateProvider</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.state</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p>The new <code>$stateProvider</code> works similar to Angular\'s v1 router, but it focuses purely\non state.</p>\n\n<p>A state corresponds to a "place" in the application in terms of the overall UI and\nnavigation. A state describes (via the controller / template / view properties) what\nthe UI looks like and does at that place.</p>\n\n<p>States often have things in common, and the primary way of factoring out these\ncommonalities in this model is via the state hierarchy, i.e. parent/child states aka\nnested states.</p>\n\n<p>The <code>$stateProvider</code> provides interfaces to declare these states for your app.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.router.$urlRouterProvider">$urlRouterProvider</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ui.router.util.$urlMatcherFactoryProvider">$urlMatcherFactoryProvider</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$locationProvider">$locationProvider</a></code>\n</li>\n</ul>\n<div class="member method"><h2 id="Methods">Methods</h2>\n<ul class="methods"><li><h3 id="decorator">decorator(name, func)</h3>\n<div class="decorator"><p>Allows you to extend (carefully) or override (at your own peril) the \n<code>stateBuilder</code> object used internally by <code>$stateProvider</code>. This can be used \nto add custom functionality to ui-router, for example inferring templateUrl \nbased on the state name.</p>\n\n<p>When passing only a name, it returns the current (original or decorated) builder\nfunction that matches <code>name</code>.</p>\n\n<p>The builder functions that can be decorated are listed below. Though not all\nnecessarily have a good use case for decoration, that is up to you to decide.</p>\n\n<p>In addition, users can attach custom decorators, which will generate new \nproperties within the state\'s internal definition. There is currently no clear \nuse-case for this beyond accessing internal states (i.e. $state.$current), \nhowever, expect this to become increasingly relevant as we introduce additional \nmeta-programming features.</p>\n\n<p><strong>Warning</strong>: Decorators should not be interdependent because the order of \nexecution of the builder functions in nondeterministic. Builder functions \nshould only be dependent on the state definition object and super function.</p>\n\n<p>Existing builder functions and current return values:</p>\n\n<ul>\n<li>parent - <code>{object}</code> - returns the parent state object.</li>\n<li>data - <code>{object}</code> - returns state data, including any inherited data that is not\noverridden by own values (if any).</li>\n<li>url - <code>{object}</code> - returns a UrlMatcher or null.</li>\n<li>navigable - returns closest ancestor state that has a URL (aka is \nnavigable).</li>\n<li>params - <code>{object}</code> - returns an array of state params that are ensured to \nbe a super-set of parent\'s params.</li>\n<li>views - <code>{object}</code> - returns a views object where each key is an absolute view \nname (i.e. "viewName@stateName") and each value is the config object \n(template, controller) for the view. Even when you don\'t use the views object \nexplicitly on a state config, one is still created for you internally.\nSo by decorating this builder function you have access to decorating template \nand controller properties.</li>\n<li>ownParams - <code>{object}</code> - returns an array of params that belong to the state, \nnot including any params defined by ancestor states.</li>\n<li>path - <code>{string}</code> - returns the full path from the root down to this state. \nNeeded for state activation.</li>\n<li>includes - <code>{object}</code> - returns an object that includes every state that \nwould pass a \'$state.includes()\' test.</li>\n</ul><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">name – {string} – </code>\n<p>The name of the builder function to decorate. </p></li>\n<li><code ng:non-bindable="">func – {object} – </code>\n<p>A function that is responsible for decorating the original \nbuilder function. The function receives two parameters:</p>\n\n<ul>\n<li><code>{object}</code> - state - The state config object.</li>\n<li><code>{object}</code> - super - The original builder function.</li>\n</ul></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{object}</code>\n– <p>$stateProvider - $stateProvider instance</p></div>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\n// Override the internal \'views\' builder with a function that takes the state\n// definition, and a reference to the internal function being overridden:\n$stateProvider.decorator(\'views\', function ($state, parent) {\n  var result = {},\n      views = parent(state);\n\n  angular.forEach(view, function (config, name) {\n    var autoName = (state.name + \'.\' + name).replace(\'.\', \'/\');\n    config.templateUrl = config.templateUrl || \'/partials/\' + autoName + \'.html\';\n    result[name] = config;\n  });\n  return result;\n});\n\n$stateProvider.state(\'home\', {\n  views: {\n    \'contact.list\': { controller: \'ListController\' },\n    \'contact.item\': { controller: \'ItemController\' }\n  }\n});\n\n// ...\n\n$state.go(\'home\');\n// Auto-populates list and item views with /partials/home/contact/list.html,\n// and /partials/home/contact/item.html, respectively.\n</pre></div>\n</div>\n</li>\n<li><h3 id="state">state(name, definition)</h3>\n<div class="state"><p>Registers a state configuration under a given state name. The stateConfig object\nhas the following acceptable properties.</p>\n\n<ul>\n<li><p>[<code>template</code>, <code>templateUrl</code>, <code>templateProvider</code>] - There are three ways to setup\nyour templates.</p>\n\n<ul><li><code>{string|object}</code> - template - String HTML content, or function that returns an HTML\nstring.</li>\n<li><code>{string}</code> - templateUrl - String URL path to template file OR function,\nthat returns URL path string.</li>\n<li><code>{object}</code> - templateProvider - Provider function that returns HTML content\nstring.</li></ul></li>\n<li><p>[<code>controller</code>, <code>controllerProvider</code>] - A controller paired to the state. You can\neither use a controller, or a controller provider.</p>\n\n<ul><li><code>{string|object}</code> - controller - Controller function or controller name.</li>\n<li><code>{object}</code> - controllerProvider - Injectable provider function that returns\nthe actual controller or string.</li></ul></li>\n<li><p><code>{object}</code> - resolve - A map of dependencies which should be injected into the\ncontroller.</p></li>\n<li><p><code>{string}</code> - url - A url with optional parameters. When a state is navigated or\ntransitioned to, the <code>$stateParams</code> service will be populated with any \nparameters that were passed.</p></li>\n<li><p><code>{object}</code> - params - An array of parameter names or regular expressions. Only \nuse this within a state if you are not using url. Otherwise you can specify your\nparameters within the url. When a state is navigated or transitioned to, the \n$stateParams service will be populated with any parameters that were passed.</p></li>\n<li><p><code>{object}</code> - views - Use the views property to set up multiple views. \nIf you don\'t need multiple views within a single state this property is not \nneeded. Tip: remember that often nested views are more useful and powerful \nthan multiple sibling views.</p></li>\n<li><p><code>{boolean}</code> - abstract - An abstract state will never be directly activated, \nbut can provide inherited properties to its common children states.</p></li>\n<li><p><code>{object}</code> - onEnter - Callback function for when a state is entered. Good way\nto trigger an action or dispatch an event, such as opening a dialog.</p></li>\n<li><p><code>{object}</code> - onExit - Callback function for when a state is exited. Good way to\ntrigger an action or dispatch an event, such as opening a dialog.</p></li>\n<li><p><code>{object}</code> - data - Arbitrary data object, useful for custom configuration.</p></li>\n</ul><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">name – {string} – </code>\n<p>A unique state name, e.g. "home", "about", "contacts". \nTo create a parent/child state use a dot, e.g. "about.sales", "home.newest".</p></li>\n<li><code ng:non-bindable="">definition – {object} – </code>\n<p>State configuratino object.</p></li>\n</ul>\n<h4 id="Example">Example</h4>\n<div class="example"><pre class="prettyprint linenums">\n// The state() method takes a unique stateName (String) and a stateConfig (Object)\n$stateProvider.state(stateName, stateConfig);\n\n// stateName can be a single top-level name (must be unique).\n$stateProvider.state("home", {});\n\n// Or it can be a nested state name. This state is a child of the above "home" state.\n$stateProvider.state("home.newest", {});\n\n// Nest states as deeply as needed.\n$stateProvider.state("home.newest.abc.xyz.inception", {});\n\n// state() returns $stateProvider, so you can chain state declarations.\n$stateProvider\n  .state("home", {})\n  .state("about", {})\n  .state("contacts", {});\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.state.$uiViewScroll.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">$uiViewScroll</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.state</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p>When called with a jqLite element, it scrolls the element into view (after a\n<code>$timeout</code> so the DOM has time to refresh).</p>\n\n<p>If you prefer to rely on <code>$anchorScroll</code> to scroll the view to the anchor,\nthis can be enabled by calling <code>$uiViewScrollProvider.useAnchorScroll()</code>.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ng.$anchorScroll">$anchorScroll</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$timeout">$timeout</a></code>\n</li>\n</ul>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.state.$view.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">$view</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.state</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.util.$templateFactory">$templateFactory</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$rootScope">$rootScope</a></code>\n</li>\n</ul>\n<div class="member method"><h2 id="Methods">Methods</h2>\n<ul class="methods"><li><h3 id="load">load(name, options)</h3>\n<div class="load"><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">name – {string} – </code>\n<p>name</p></li>\n<li><code ng:non-bindable="">options – {object} – </code>\n<p>option object.</p></li>\n</ul>\n</div>\n</li>\n</ul>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.state.directive.ui-sref-active.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">ui-sref-active</code>\n<span class="hint">(directive in module <code ng:non-bindable="">ui.router.state</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p>A directive working alongside ui-sref to add classes to an element when the \nrelated ui-sref directive\'s state is active, and removing them when it is inactive.\nThe primary use-case is to simplify the special appearance of navigation menus \nrelying on <code>ui-sref</code>, by having the "active" state\'s menu button appear different,\ndistinguishing it from the inactive menu items.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.state.$state">$state</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ui.router.state.$stateParams">$stateParams</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$interpolate">$interpolate</a></code>\n</li>\n</ul>\n<h2 id="Usage">Usage</h2>\n<div class="usage">as attribute<pre class="prettyprint linenums">&lt;ANY ui-sref-active&gt;\n   ...\n&lt;/ANY&gt;</pre>\n</div>\n<h2 id="Example">Example</h2>\n<div class="example"><pre class="prettyprint linenums">\n&lt;ul&gt;\n  &lt;li ui-sref-active="active" class="item active"&gt;\n    &lt;a ui-sref="app.user({user: \'bilbobaggins\'})" href="/users/bilbobaggins"&gt;@bilbobaggins&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;!-- ... --&gt;\n&lt;/ul&gt;\n</pre></div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.state.directive.ui-sref.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">ui-sref</code>\n<span class="hint">(directive in module <code ng:non-bindable="">ui.router.state</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p>A directive that binds a link (<code>&lt;a&gt;</code> tag) to a state. If the state has an associated \nURL, the directive will automatically generate &amp; update the <code>href</code> attribute via \nthe <a href="#/api/ui.router.state.$state#methods_href">$state.href()</a> method. Clicking \nthe link will trigger a state transition with optional parameters. </p>\n\n<p>Also middle-clicking, right-clicking, and ctrl-clicking on the link will be \nhandled natively by the browser.</p>\n\n<p>You can also use relative state paths within ui-sref, just like the relative \npaths passed to <code>$state.go()</code>. You just need to be aware that the path is relative\nto the state that the link lives in, in other words the state that loaded the \ntemplate containing the link.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.state.$state">$state</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$timeout">$timeout</a></code>\n</li>\n</ul>\n<h2 id="Usage">Usage</h2>\n<div class="usage">as attribute<pre class="prettyprint linenums">&lt;ANY ui-sref="{string}"&gt;\n   ...\n&lt;/ANY&gt;</pre>\n<h3 id="Parameters">Parameters</h3>\n<ul class="parameters"><li><code ng:non-bindable="">ui-sref – {string} – </code>\n<p>\'stateName\' can be any valid absolute or relative state</p></li>\n</ul>\n</div>\n<h2 id="Example">Example</h2>\n<div class="example"><pre class="prettyprint linenums">\n&lt;a ui-sref="home"&gt;Home&lt;/a&gt; | &lt;a ui-sref="about"&gt;About&lt;/a&gt;\n\n&lt;ul&gt;\n  &lt;li ng-repeat="contact in contacts"&gt;\n    &lt;a ui-sref="contacts.detail({ id: contact.id })"&gt;{{ contact.name }}&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</pre></div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.state.diretive.ui-view.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">ui-view</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.state.diretive</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p>The ui-view directive tells $state where to place your templates.\nA view can be unnamed or named.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.state.$state">$state</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$compile">$compile</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$controller">$controller</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$injector">$injector</a></code>\n</li>\n</ul>\n<h2 id="Usage">Usage</h2>\n<div class="usage">as element:<pre class="prettyprint linenums">&lt;ui-view\n       ui-view="{string}"&gt;\n&lt;/ui-view&gt;</pre>\nas attribute<pre class="prettyprint linenums">&lt;ANY ui-view="{string}"&gt;\n   ...\n&lt;/ANY&gt;</pre>\nas class<pre class="prettyprint linenums">&lt;ANY class="ui-view: {string};"&gt;\n   ...\n&lt;/ANY&gt;</pre>\n<h3 id="Parameters">Parameters</h3>\n<ul class="parameters"><li><code ng:non-bindable="">ui-view – {string} – </code>\n<p>A view name.</p></li>\n</ul>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.state.filter.includeByState.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">includeByState</code>\n<span class="hint">(filter in module <code ng:non-bindable="">ui.router.state</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p>Translates to <a href="#/api/ui.router.state.$state#includes">$state.includes()</a>.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.state.$state">$state</a></code>\n</li>\n</ul>\n<h2 id="Usage">Usage</h2>\n<div class="usage"><h3 id="In.HTML.Template.Binding">In HTML Template Binding</h3>\n<div class="in-html-template-binding"><code ng:non-bindable="">{{ includeByState_expression | includeByState }}</code>\n</div>\n<h3 id="In.JavaScript">In JavaScript</h3>\n<div class="in-javascript"><code ng:non-bindable="">$filter(\'includeByState\')()</code>\n</div>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.state.filter.isState.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">isState</code>\n<span class="hint">(filter in module <code ng:non-bindable="">ui.router.state</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p>Translates to <a href="#/api/ui.router.state.$state#is">$state.is("stateName")</a>.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ui.router.state.$state">$state</a></code>\n</li>\n</ul>\n<h2 id="Usage">Usage</h2>\n<div class="usage"><h3 id="In.HTML.Template.Binding">In HTML Template Binding</h3>\n<div class="in-html-template-binding"><code ng:non-bindable="">{{ isState_expression | isState }}</code>\n</div>\n<h3 id="In.JavaScript">In JavaScript</h3>\n<div class="in-javascript"><code ng:non-bindable="">$filter(\'isState\')()</code>\n</div>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.util.$resolve.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">$resolve</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.util</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p>Manages resolution of (acyclic) graphs of promises.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ng.$q">$q</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$injector">$injector</a></code>\n</li>\n</ul>\n<div class="member method"><h2 id="Methods">Methods</h2>\n<ul class="methods"><li><h3 id="resolve">resolve(invocables, locals, parent, self)</h3>\n<div class="resolve"><p>Resolves a set of invocables. An invocable is a function to be invoked via \n<code>$injector.invoke()</code>, and can have an arbitrary number of dependencies. \nAn invocable can either return a value directly,\nor a <code>$q</code> promise. If a promise is returned it will be resolved and the \nresulting value will be used instead. Dependencies of invocables are resolved \n(in this order of precedence)</p>\n\n<ul>\n<li>from the specified <code>locals</code></li>\n<li>from another invocable that is part of this <code>$resolve</code> call</li>\n<li>from an invocable that is inherited from a <code>parent</code> call to <code>$resolve</code> \n(or recursively</li>\n<li>from any ancestor <code>$resolve</code> of that parent).</li>\n</ul>\n\n<p>The return value of <code>$resolve</code> is a promise for an object that contains \n(in this order of precedence)</p>\n\n<ul>\n<li>any <code>locals</code> (if specified)</li>\n<li>the resolved return values of all injectables</li>\n<li>any values inherited from a <code>parent</code> call to <code>$resolve</code> (if specified)</li>\n</ul>\n\n<p>The promise will resolve after the <code>parent</code> promise (if any) and all promises \nreturned by injectables have been resolved. If any invocable \n(or <code>$injector.invoke</code>) throws an exception, or if a promise returned by an \ninvocable is rejected, the <code>$resolve</code> promise is immediately rejected with the \nsame error. A rejection of a <code>parent</code> promise (if specified) will likewise be \npropagated immediately. Once the <code>$resolve</code> promise has been rejected, no \nfurther invocables will be called.</p>\n\n<p>Cyclic dependencies between invocables are not permitted and will caues <code>$resolve</code>\nto throw an error. As a special case, an injectable can depend on a parameter \nwith the same name as the injectable, which will be fulfilled from the <code>parent</code> \ninjectable of the same name. This allows inherited values to be decorated. \nNote that in this case any other injectable in the same <code>$resolve</code> with the same\ndependency would see the decorated value, not the inherited value.</p>\n\n<p>Note that missing dependencies -- unlike cyclic dependencies -- will cause an \n(asynchronous) rejection of the <code>$resolve</code> promise rather than a (synchronous) \nexception.</p>\n\n<p>Invocables are invoked eagerly as soon as all dependencies are available. \nThis is true even for dependencies inherited from a <code>parent</code> call to <code>$resolve</code>.</p>\n\n<p>As a special case, an invocable can be a string, in which case it is taken to \nbe a service name to be passed to <code>$injector.get()</code>. This is supported primarily \nfor backwards-compatibility with the <code>resolve</code> property of <code>$routeProvider</code> \nroutes.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">invocables – {object} – </code>\n<p>functions to invoke or \n<code>$injector</code> services to fetch.</p></li>\n<li><code ng:non-bindable="">locals – {object} – </code>\n<p>values to make available to the injectables</p></li>\n<li><code ng:non-bindable="">parent – {object} – </code>\n<p>a promise returned by another call to <code>$resolve</code>.</p></li>\n<li><code ng:non-bindable="">self – {object} – </code>\n<p>the <code>this</code> for the invoked methods</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{object}</code>\n– <p>Promise for an object that contains the resolved return value\nof all invocables, as well as any inherited and local values.</p></div>\n</div>\n</li>\n<li><h3 id="study">study(invocables)</h3>\n<div class="study"><p>Studies a set of invocables that are likely to be used multiple times.\n<pre class="prettyprint linenums">\n$resolve.study(invocables)(locals, parent, self)\n</pre>\nis equivalent to\n<pre class="prettyprint linenums">\n$resolve.resolve(invocables, locals, parent, self)\n</pre>\nbut the former is more efficient (in fact <code>resolve</code> just calls <code>study</code> \ninternally).</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">invocables – {object} – </code>\n<p>Invocable objects</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{function}</code>\n– <p>a function to pass in locals, parent and self</p></div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.util.$templateFactory.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable="">$templateFactory</code>\n<span class="hint">(service in module <code ng:non-bindable="">ui.router.util</code>\n)</span>\n</h1>\n<div><h2 id="Description">Description</h2>\n<div class="description"><p>Service. Manages loading of templates.</p></div>\n<h2 id="Dependencies">Dependencies</h2>\n<ul class="dependencies"><li><code ng:non-bindable=""><a href="#/api/ng.$http">$http</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$templateCache">$templateCache</a></code>\n</li>\n<li><code ng:non-bindable=""><a href="#/api/ng.$injector">$injector</a></code>\n</li>\n</ul>\n<div class="member method"><h2 id="Methods">Methods</h2>\n<ul class="methods"><li><h3 id="fromConfig">fromConfig(config, params, locals)</h3>\n<div class="fromconfig"><p>Creates a template from a configuration object. </p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">config – {object} – </code>\n<p>Configuration object for which to load a template. \nThe following properties are search in the specified order, and the first one \nthat is defined is used to create the template:</p></li>\n<li><code ng:non-bindable="">config.template – {string|object} – </code>\n<p>html string template or function to \nload via <a href="#/api/ui.router.util.$templateFactory#fromString">fromString</a>.</p></li>\n<li><code ng:non-bindable="">config.templateUrl – {string|object} – </code>\n<p>url to load or a function returning \nthe url to load via <a href="#/api/ui.router.util.$templateFactory#fromUrl">fromUrl</a>.</p></li>\n<li><code ng:non-bindable="">config.templateProvider – {Function} – </code>\n<p>function to invoke via \n<a href="#/api/ui.router.util.$templateFactory#fromProvider">fromProvider</a>.</p></li>\n<li><code ng:non-bindable="">params – {object} – </code>\n<p>Parameters to pass to the template function.</p></li>\n<li><code ng:non-bindable="">locals – {object} – </code>\n<p>Locals to pass to <code>invoke</code> if the template is loaded \nvia a <code>templateProvider</code>. Defaults to <code>{ params: params }</code>.</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{string|object}</code>\n– <p>The template html as a string, or a promise for \nthat string,or <code>null</code> if no template is configured.</p></div>\n</div>\n</li>\n<li><h3 id="fromString">fromString(template, params)</h3>\n<div class="fromstring"><p>Creates a template from a string or a function returning a string.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">template – {string|object} – </code>\n<p>html template as a string or function that \nreturns an html template as a string.</p></li>\n<li><code ng:non-bindable="">params – {object} – </code>\n<p>Parameters to pass to the template function.</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{string|object}</code>\n– <p>The template html as a string, or a promise for that \nstring.</p></div>\n</div>\n</li>\n<li><h3 id="fromUrl">fromUrl(url, params)</h3>\n<div class="fromurl"><p>Loads a template from the a URL via <code>$http</code> and <code>$templateCache</code>.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">url – {string|Function} – </code>\n<p>url of the template to load, or a function \nthat returns a url.</p></li>\n<li><code ng:non-bindable="">params – {Object} – </code>\n<p>Parameters to pass to the url function.</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{string|Promise.&lt;string&gt;}</code>\n– <p>The template html as a string, or a promise \nfor that string.</p></div>\n</div>\n</li>\n<li><h3 id="fromUrl">fromUrl(provider, params, locals)</h3>\n<div class="fromurl"><p>Creates a template by invoking an injectable provider function.</p><h4 id="Parameters">Parameters</h4>\n<ul class="parameters"><li><code ng:non-bindable="">provider – {Function} – </code>\n<p>Function to invoke via <code>$injector.invoke</code></p></li>\n<li><code ng:non-bindable="">params – {Object} – </code>\n<p>Parameters for the template.</p></li>\n<li><code ng:non-bindable="">locals – {Object} – </code>\n<p>Locals to pass to <code>invoke</code>. Defaults to \n<code>{ params: params }</code>.</p></li>\n</ul>\n<h4 id="Returns">Returns</h4>\n<div class="returns"><code ng:non-bindable="">{string|Promise.&lt;string&gt;}</code>\n– <p>The template html as a string, or a promise \nfor that string.</p></div>\n</div>\n</li>\n</ul>\n</div>\n</div>\n';

}
return __p
};

this["JST"]["assets/linker/js/vendor/angular-ui-router/site/partials/api/ui.router.util.html"] = function(obj) {
obj || (obj = {});
var __t, __p = '', __e = _.escape;
with (obj) {
__p += '<h1><code ng:non-bindable=""></code>\n<span class="hint"></span>\n</h1>\n<div></div>\n';

}
return __p
};